name: Rust Build & Test & Deploy
run-name: ðŸš€ Build & Test on ${{ github.sha }} by ${{ github.actor }}
on:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build & Test & Publish on ${{ github.sha }}
    runs-on: ubuntu-latest

    steps:
      - run: cargo version
      - uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ./garyyou.com/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Build
        run: cargo build --verbose
        working-directory: garyyou.com
      - name: Run tests
        run: cargo test --verbose
        working-directory: garyyou.com

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.MY_DOCKER_USERNAME }}
      #     password: ${{ secrets.MY_DOCKER_PASSWORD }}

      # - name: Build and push Docker images
      #   uses: docker/build-push-action@v2
      #   with:
      #     platforms: linux/amd64,linux/arm64
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.MY_DOCKER_USERNAME }}/personal_website:latest

      # - name: Build and push Docker images
      #   uses: docker/bake-action@v2.3.0
      #   with:
      #     push: true
      #     files: ./Dockerfile
      #     set: |
      #       *.cache-from=type=gha
      #       *.cache-to=type=gha,mode=max

  deploy:
    name: Deploy ${{ github.sha }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check cache
        working-directory: garyyou.com
        run: |
          ls -la ~/.cargo
          ls -la target/

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MY_AWS_SERVER_HOST }}
          username: gary
          key: ${{ secrets.MY_AWS_SERVER_PRIVATE_KEY }}
          script: |
            echo "Start deploy"
            cd ~/github/personal_website
            git pull
            ./start.sh
            docker image prune -f
